# Task 2: Chatbot Prototype for Financial Insights

This task involved designing and developing a simplified AI chatbot prototype that responds to predefined financial queries using insights gathered in Task 1. The goal was to simulate how a financial chatbot might interact with users by providing clear, data-driven responses to common questions.

# Objective

Create a basic chatbot in Python that can interpret and respond to a small set of predefined financial queries using structured data previously extracted and analyzed from Microsoft, Tesla, and Apple 10-K filings.

# Steps Followed

## 1. Preparation
- Reviewed the financial data compiled and analyzed during Task 1.
- Ensured Python was installed along with essential libraries:
  - `pandas` for data handling
  - `Flask` (optional) for building a simple web interface

## 2. Chatbot Design and Data Preparation
- Selected common financial queries such as:
  - "What is the total revenue?"
  - "How has net income changed over the last year?"
  - "What are the total liabilities?"
- Created canned responses based on the data analysis.
- Mapped each query to a specific response format using values derived from Task 1.

## 3. Basic Chatbot Development
- Developed a simple Python script using `if-else` logic to respond to queries.
- Example chatbot logic:
  ```python
  def simple_chatbot(user_query):
      if user_query == "What is the total revenue?":
          return "The total revenue is [amount]."
      elif user_query == "How has net income changed over the last year?":
          return "The net income has [increased/decreased] by [amount] over the last year."
      else:
          return "Sorry, I can only provide information on predefined queries."
  ```
- Implemented either a command-line interface using `input()` or a basic Flask app for web-based interaction.

## 4. Demonstration and Documentation
- Tested the chatbot to ensure correct mapping of queries to responses.
- Documented chatbot functionality and logic in a summary report.
- Packaged the final Python script, test examples, and documentation into a `.zip` file for submission.

# Tools & Technologies

- **Python 3**
- **pandas**
- **Flask** (optional)

